import sys
from pathlib import Path
from time import sleep
from datetime import datetime

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.wait import WebDriverWait

# Cria√ß√£o do navegador ‚Äî simplificado sem Service nem chromedriver manual
def make_chrome_browser(*options: str) -> webdriver.Chrome:
    chrome_options = webdriver.ChromeOptions()
    chrome_options.add_argument('--start-maximized')

    if options:
        for option in options:
            chrome_options.add_argument(option)

    browser = webdriver.Chrome(options=chrome_options)
    return browser

# Fun√ß√£o para capturar screenshots em caso de erro
def salvar_screenshot(browser, nome='screenshot'):
    timestamp = datetime.now().strftime('%Y-%m-%d%H-%M-%S')
    filename = f'{nome}_{timestamp}.png'
    browser.save_screenshot(filename)
    print(f'[üñºÔ∏è] Screenshot salva: {filename}')

# Fun√ß√£o principal de ativar produtos da p√°gina
def ativar_produtos_na_pagina(browser, timeout=15) -> bool:
    wait = WebDriverWait(browser, timeout)

    try:
        wait.until(EC.presence_of_element_located(
            (By.CSS_SELECTOR, '[data-testid="active-listing-container"]')
        ))
    except Exception:
        print('[‚ö†Ô∏è] Nenhum produto encontrado na p√°gina.')
        return False

    produtos = browser.find_elements(By.CSS_SELECTOR, '[data-testid="active-listing-container"]')

    if not produtos:
        print('[‚ö†Ô∏è] Lista de produtos vazia.')
        return False

    print(f'[üì¶] {len(produtos)} produtos encontrados na p√°gina.')

    for index, produto in enumerate(produtos, start=1):
        try:
            status_element = produto.find_element(By.CSS_SELECTOR, '[data-testid="listing-status"]')
            status_text = status_element.text.strip().lower()

            nome_element = produto.find_element(By.CSS_SELECTOR, '[data-testid="listing-title"]')
            nome_produto = nome_element.text.strip()

            if status_text != 'ativo':
                print(f'[üõ†Ô∏è] Produto "{nome_produto}" ({index}) est√° INATIVO. Iniciando ativa√ß√£o...')

                menu_button = produto.find_element(By.CSS_SELECTOR, '[data-testid="overflow-menu-button"]')
                menu_button.click()
                sleep(0.5)

                editar_opcao = WebDriverWait(browser, 10).until(
                    EC.element_to_be_clickable((By.CSS_SELECTOR, 'ul[role="menu"] li'))
                )
                editar_opcao.click()

                browser.switch_to.window(browser.window_handles[-1])

                try:
                    ativar_button = WebDriverWait(browser, 10).until(
                        EC.element_to_be_clickable((By.XPATH, '//button[contains(text(), "Ativar")]'))
                    )
                    ativar_button.click()

                    try:
                        WebDriverWait(browser, 10).until(EC.invisibility_of_element(ativar_button))
                        print(f'[‚úÖ] Produto "{nome_produto}" ativado com sucesso!')
                    except:
                        sleep(2)
                        print(f'[‚úÖ] Produto "{nome_produto}" ativado (fallback no sleep).')

                except Exception as e:
                    print(f'[‚ùå] Erro ao ativar produto "{nome_produto}": {e}')
                    salvar_screenshot(browser, nome='erro_ativar')
                    raise

                finally:
                    browser.close()
                    browser.switch_to.window(browser.window_handles[0])
                    sleep(0.5)

            else:
                print(f'[‚úîÔ∏è] Produto "{nome_produto}" ({index}) j√° est√° ATIVO.')

        except Exception as e:
            print(f'[‚ö†Ô∏è] Erro no processamento do produto {index}: {e}')
            salvar_screenshot(browser, nome='erro_produto')
            continue

    return True

# Avan√ßa para a pr√≥xima p√°gina
def avancar_pagina(browser, timeout=10) -> bool:
    try:
        wait = WebDriverWait(browser, timeout)
        botao_proxima = wait.until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, 'li.pagination__next a'))
        )
        botao_proxima.click()

        wait.until(EC.presence_of_element_located(
            (By.CSS_SELECTOR, '[data-testid="active-listing-container"]')
        ))
        print('[‚û°Ô∏è] Avan√ßando para a pr√≥xima p√°gina...')
        return True

    except Exception:
        print('[‚ùå] N√£o h√° mais p√°ginas para avan√ßar.')
        return False

# Fun√ß√£o para acessar os an√∫ncios inativos (apenas o primeiro link)
def acessar_anuncios_inativos(browser):
    url = 'https://www.mercadolivre.com.br/anuncios/lista?filters=OMNI_UNDER_REVIEW&loadSession=1&page=1&sort=DEFAULT&task=MODERATE_MARKETPLACE'

    print(f'[üåê] Tentando acessar: {url}')
    browser.get(url)
    sleep(3)

    try:
        # Verifica se o conte√∫do relevante foi carregado
        browser.find_element(By.CSS_SELECTOR, '[data-testid="active-listing-container"]')
        print('[‚úÖ] P√°gina carregada com sucesso!')
        return True  # Se a p√°gina foi carregada corretamente, retorna True
    except Exception as e:
        print(f'[‚ùå] N√£o carregou. Erro: {e}')
        return False

# Fun√ß√£o principal
def navegar_e_ativar():
    browser = make_chrome_browser()

    try:
        browser.get('https://www.mercadolivre.com.br/')
        print('[üåê] Acesse o Mercado Livre e fa√ßa o login.')

        input('‚ö†Ô∏è Ap√≥s fazer login manualmente, pressione ENTER para continuar...')

        if not acessar_anuncios_inativos(browser):
            print('[‚ùå] N√£o foi poss√≠vel acessar a p√°gina de an√∫ncios inativos.')
            return

        while True:
            encontrou = ativar_produtos_na_pagina(browser)

            if not encontrou:
                print('[‚ÑπÔ∏è] Nenhum produto encontrado na p√°gina.')

            if not avancar_pagina(browser):
                break

    finally:
        input('\nüõë Processo finalizado. Pressione ENTER para fechar...')
        browser.quit()

if __name__ == '__main__':
    navegar_e_ativar()
